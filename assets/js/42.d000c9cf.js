(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{408:function(s,t,n){"use strict";n.r(t);var a=n(44),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"git-基本使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-基本使用"}},[s._v("#")]),s._v(" git 基本使用")]),s._v(" "),n("h2",{attrs:{id:"git-是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-是什么"}},[s._v("#")]),s._v(" git 是什么")]),s._v(" "),n("p",[s._v("Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。"),n("br"),s._v("\n工作原理:\n"),n("img",{attrs:{src:"/img/git.png"}}),s._v("\nWorkspace：工作区"),n("br"),s._v("\nIndex / Stage：暂存区"),n("br"),s._v("\nRepository：仓库区（或本地仓库）"),n("br"),s._v("\nRemote：远程仓库")]),s._v(" "),n("h2",{attrs:{id:"git-与-svn-区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-与-svn-区别"}},[s._v("#")]),s._v(" Git 与 SVN 区别")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。")])]),s._v(" "),n("li",[n("p",[s._v("Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。")])])]),s._v(" "),n("h2",{attrs:{id:"git-常用命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git-常用命令"}},[s._v("#")]),s._v(" git 常用命令")]),s._v(" "),n("p",[n("strong",[s._v("创建版本库")]),s._v("\n版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("需要创建版本可的文件路径"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  \n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("执行完git init 该目录下就会多一个.git文件，这是git追踪管理版本的，如果就是目录设置默认隐藏，通过"),n("code",[s._v("ls -a")]),s._v("可以查看")]),s._v(" "),n("p",[s._v("版本控制系统，其实只能跟踪文本文件的改动，而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的"),n("br"),s._v(" "),n("strong",[s._v("查看文件暂存提交状态")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("git status")]),s._v("命令用于显示工作目录和暂存区的状态。使用此命令能看到那些修改被暂存到了, 哪些没有, 哪些文件没有被Git tracked到. commit之前的状态")]),s._v(" "),n("li",[n("code",[s._v("git log")]),s._v("  查看历史提交记录("),n("code",[s._v("q")]),s._v("退出)"),n("br"),s._v("\n命令形式:git log [option]"),n("br"),s._v("\noptions\n"),n("ul",[n("li",[s._v("--all 显示所有分支")]),s._v(" "),n("li",[s._v("--pretty=oneline 将提交信息显示为一行")]),s._v(" "),n("li",[s._v("--abbrev-commit 使得输出的commitId更简短")]),s._v(" "),n("li",[s._v("--graph 以图的形式显示")])])]),s._v(" "),n("li",[n("code",[s._v("git reflog")]),s._v(" 查看所以的版本，包括回退过的版本")])]),s._v(" "),n("p",[n("strong",[s._v("添加到暂存区")]),n("br"),s._v("\n在工作区的文件有两个状态：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("unstaged")]),s._v(": (修改已有文件)已经跟踪，但未暂存")]),s._v(" "),n("li",[n("code",[s._v("untracked")]),s._v(": （新创建的文件）未跟踪")]),s._v(" "),n("li",[s._v("使用"),n("code",[s._v("git add")]),s._v("命令可以把文件提交到仓库的缓存区，文件状态变为"),n("code",[s._v("staged")]),s._v(" "),n("img",{attrs:{src:"/img/gitsteps.png"}})])]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暂存全部 (不会添加.gitignor忽略的文件)")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" *\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暂存pages目录及其子目录.js结尾文件")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" pages/*.js\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暂存 当前目录下text 开头的JS文件,不考虑子目录的文件")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" text-*.js\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暂存指定文件test.js, 这里写的是文件路径，不考虑子目录的文件")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" test.js\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看还没提交的被修改过或已删除文件，不写path默认查找范围为根目录下所以文件")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" -i "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("path"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加被.gitignor忽略的文件")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" -f\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[n("strong",[s._v("提交到本地仓库")])]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'提交注释'")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("提交到远程仓库")])]),s._v(" "),n("p",[n("strong",[s._v("版本回退")])]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("commitID"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 退回上一个版本")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard HEAD^\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 退回上上个版本")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard HEAD^^\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("添加到忽略文件")]),n("br"),s._v("\n有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。"),n("br"),s._v("\n我们可以在工作目录 中创建一个名为 .gitignore 的文件(文件名称固定)，列出要忽略的文件模式。")]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[s._v("node_modules\n/dist\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# local env files")]),s._v("\n.env.local\n.env.*.local\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Log files")]),s._v("\n*-debug.log*\n*-error.log*\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Editor directories and files")]),s._v("\n.idea\n.vscode\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[n("strong",[s._v("分支命令")])]),s._v(" "),n("div",{staticClass:"language-bash line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看本地分支")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看本地分支跟远程分支详细的关联关系")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch -vv\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建分支")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("分支名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 切换分支")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("分支名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 切换到一个不存在的分支(创建并切换)")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout -b "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("分支名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 合并分支, [分支名]的内容合并到当前分支")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" merge "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("分支名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除分支，只能删除当前分支，只能删除其他分支")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch -d "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("分支名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除分支时，需要做各种检查，分支内容没有合并是 -d无法删除分支")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch -D "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("分支名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不做任何检查，强制")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[n("strong",[s._v("解决冲突")]),s._v("\n当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解 决冲突，解决冲突步骤如下:")]),s._v(" "),n("ol",[n("li",[s._v("处理文件中冲突的地方")]),s._v(" "),n("li",[s._v("将解决完冲突的文件加入暂存区(add)")]),s._v(" "),n("li",[s._v("提交到仓库(commit)")])]),s._v(" "),n("h2",{attrs:{id:"开发中分支使用原则与流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开发中分支使用原则与流程"}},[s._v("#")]),s._v(" 开发中分支使用原则与流程")]),s._v(" "),n("p",[s._v("几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离\n开来进行重大的Bug修改、开发新的功能，以免影响开发主线")]),s._v(" "),n("ul",[n("li",[s._v("master 一般作为主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到test分支,测试准备上线。")]),s._v(" "),n("li",[s._v("test 测试分支")]),s._v(" "),n("li",[s._v("pre 预发布分支 一般用于模拟线上环境测试分子")]),s._v(" "),n("li",[s._v("prod 生成分支 发布上线分支")])]),s._v(" "),n("p",[s._v("如果线上出现bug, 则把prod分支拉下拉并且合到pre分支修改，bug改完测完上线后，再把pre改的内容合到master。")]),s._v(" "),n("h2",{attrs:{id:"git远程仓库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git远程仓库"}},[s._v("#")]),s._v(" Git远程仓库")]),s._v(" "),n("p",[n("strong",[s._v("ssh配置公钥")]),n("br"),s._v("\n登录远程服务器的时候，是需要输入登录密码的,每次都要手动输入账号密码会很麻烦。\n可以ssh配置公钥，配好后对方直接使用ssh username，就可以直接连上，不用输密码。")]),s._v(" "),n("ul",[n("li",[s._v("生成SSH公钥: 打开终端输入 "),n("code",[s._v("ssh-keygen -t rsa")])]),s._v(" "),n("li",[s._v("不断回车 (如果公钥已经存在，则自动覆盖)")])]),s._v(" "),n("p",[n("strong",[s._v("Gitee设置账户共公钥")])]),s._v(" "),n("ul",[n("li",[s._v("获取公钥：终端输入"),n("code",[s._v("cat ~/.ssh/id_rsa.pub")])]),s._v(" "),n("li",[s._v("把返回的内容复制贴到码云SSH公钥配置的地方\n"),n("img",{attrs:{src:"/img/ssh.png"}})]),s._v(" "),n("li",[s._v("验证是否配置成功: 终端输入"),n("code",[s._v("ssh -T git@gitee.com")])])]),s._v(" "),n("p",[n("strong",[s._v("本地添加远到程仓库")])]),s._v(" "),n("ol",[n("li",[s._v("本地仓库跟已创远程仓库对接"),n("code",[s._v("git remote add <远端名称> <仓库路径>")])])]),s._v(" "),n("ul",[n("li",[s._v("远端名称，默认是origin，取决于远端服务器设置, 可以另外给远程仓库起名")]),s._v(" "),n("li",[s._v("仓库路径，从远端服务器获取此URL")])]),s._v(" "),n("p",[n("strong",[s._v("推送到远程仓库")])]),s._v(" "),n("ul",[n("li",[n("code",[s._v("git push -f --set-upstream [远端名称] [本地分支名]:[远端分支名] ]")])]),s._v(" "),n("li",[s._v("如果远程分支名和本地分支名称相同，则可以只写本地分支"),n("code",[s._v("git push [远端名称] master")])]),s._v(" "),n("li",[s._v("-f 表示强制覆盖")]),s._v(" "),n("li",[s._v("--set-upstream 第一推送到远端的同时并且建立起和远端分支的关联关系"),n("code",[s._v("git push --set-upstream origin master")])]),s._v(" "),n("li",[s._v("如果当前分支已经和远端分支关联，则可以省略分支名和远端名。 "),n("code",[s._v("git push")]),s._v(" 将master分支推送到已关联的远端分支。")])]),s._v(" "),n("p",[n("strong",[s._v("查看远程仓库")]),s._v(" : "),n("code",[s._v("git remote")])]),s._v(" "),n("p",[n("strong",[s._v("从远程仓库克隆")])]),s._v(" "),n("ol",[n("li",[s._v("把远程仓库代码下载到本地"),n("code",[s._v("git clone <仓库路径> <本地目录>")])]),s._v(" "),n("li",[s._v("本地目录可以省略，会自动生成一个目录")])]),s._v(" "),n("p",[n("strong",[s._v("从远程仓库中抓取和拉取")])]),s._v(" "),n("ul",[n("li",[s._v("抓取指令就是将仓库里的更新都抓取到本地，不会进行合并\n"),n("ul",[n("li",[s._v("抓取 命令:"),n("code",[s._v("git fetch [远端名] [分支名]")])]),s._v(" "),n("li",[s._v("如果不指定远端名称和分支名，则抓取所有分支。")])])]),s._v(" "),n("li",[s._v("拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge\n"),n("ul",[n("li",[s._v("拉取 命令: "),n("code",[s._v("git pull [远端名] [分支名]")])]),s._v(" "),n("li",[s._v("如果不指定远端名称和分支名，则抓取所有并更新当前分支。")])])])]),s._v(" "),n("p",[n("strong",[s._v("解决合并冲突")]),n("br"),s._v("\n在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。"),n("br"),s._v("\nA用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时B用户晚于A用户，故需要先拉取远程仓库的提交，经过合并后才能推送到远端分支,如下图所示。")])])}),[],!1,null,null,null);t.default=e.exports}}]);